variables:
  data_local: ./my-copy-c4
  data_remote:  # If blank, files must be present in data_local
  max_seq_len: 2048
  global_seed: 17

  # Run Name
  run_name: mkv # If left blank, will be read from env var $RUN_NAME

  order:
    # standard
    standard:
      order:
        - name: default
      repeat: 12

    # cross layer attention with 2 shared layers
    cla2:
      order:
        - name: default
        - name: reuse_kv_layer
      repeat: 6 # 12

    # cross layer attention with 4 shared layers
    cla4:
      order:
        - name: default
        - {name: reuse_kv_layer, repeat: 3}
      repeat: 3

    # matryoshka
    use_cache: True
    matryoshka_ascending: True
    mkv:
      order:
        - name: matryoshka_layer1
        - name: matryoshka_layer2
        - name: matryoshka_layer4
        - name: matryoshka_layer8
      repeat: 3

    # matryoshka with cross layer attention (2 shared layers)
    mkv_cla:
      order:
        - name: matryoshka_layer1
        - name: reuse_kv_layer
        - name: matryoshka_layer2
        - name: reuse_kv_layer
        - name: matryoshka_layer4
        - name: reuse_kv_layer
        - name: matryoshka_layer8
        - name: reuse_kv_layer
      repeat: 3

max_seq_len: ${variables.max_seq_len}
run_name: ${variables.run_name}

# Model
model:
  name: mpt_causal_lm
  init_device: meta
  d_model: 768
  n_heads: 12
  n_layers: 12
  expansion_ratio: 4
  max_seq_len: ${variables.max_seq_len}
  vocab_size: 50368
  attn_config:
    attn_impl: flash
    rope: True

  use_cache: ${variables.order.use_cache}

  block_overrides:
    overrides:
      reuse_kv_layer:
        attn_config:
          reuse_kv_layer_idx: -1
      matryoshka_layer1:
        attn_config:
          matryoshka_factor: 1
          matryoshka_ascending: ${variables.order.matryoshka_ascending}
      matryoshka_layer2:
        attn_config:
          matryoshka_factor: 2
          matryoshka_ascending: ${variables.order.matryoshka_ascending}
      matryoshka_layer4:
        attn_config:
          matryoshka_factor: 4
          matryoshka_ascending: ${variables.order.matryoshka_ascending}
      matryoshka_layer8:
        attn_config:
          matryoshka_factor: 8
          matryoshka_ascending: ${variables.order.matryoshka_ascending}
    order:
      # - ${variables.order.standard}
      # - ${variables.order.cla2}
      # - ${variables.order.cla4}
      - ${variables.order.mkv}
      # - ${variables.order.mkv_cla},

# Tokenizer
tokenizer:
  name: EleutherAI/gpt-neox-20b
  kwargs:
    model_max_length: ${variables.max_seq_len}

# Dataloaders
train_loader:
  name: text
  dataset:
    local: ${variables.data_local}
    remote: ${variables.data_remote}
    split: train
    shuffle: true
    max_seq_len: ${variables.max_seq_len}
    shuffle_seed: ${variables.global_seed}
  drop_last: true
  num_workers: 8

eval_loader:
  name: text
  dataset:
    local: ${variables.data_local}
    remote: ${variables.data_remote}
    split: val
    shuffle: false
    max_seq_len: ${variables.max_seq_len}
    shuffle_seed: ${variables.global_seed}
  drop_last: false
  num_workers: 8

# Optimization
scheduler:
  name: cosine_with_warmup
  t_warmup: 100ba
  alpha_f: 0.1

optimizer:
  name: decoupled_adamw
  lr: 6.0e-4
  betas:
  - 0.9
  - 0.95
  eps: 1.0e-08
  weight_decay: 0.0

algorithms:
  gradient_clipping:
    clipping_type: norm
    clipping_threshold: 1.0

max_duration: 4800ba  # ~ 2.5B tokens
eval_interval: 500ba
eval_first: false
eval_subset_num_batches: -1
global_train_batch_size: 256

# System
seed: ${variables.global_seed}
device_eval_batch_size: 16
# device_train_microbatch_size: 16
device_train_microbatch_size: auto
precision: amp_bf16

# FSDP
fsdp_config:
  sharding_strategy: FULL_SHARD
  mixed_precision: PURE
  activation_checkpointing: false
  activation_checkpointing_reentrant: false
  activation_cpu_offload: false
  limit_all_gathers: true

# Logging
progress_bar: false
log_to_console: true
console_log_interval: 1ba

callbacks:
  speed_monitor:
    window_size: 10
  lr_monitor: {}
  memory_monitor: {}
  runtime_estimator: {}

loggers:
  wandb: {'project': 'mkv'}

# Checkpoint to local filesystem or remote object store
# save_interval: 500ba
# save_num_checkpoints_to_keep: 1  # Important, this cleans up checkpoints saved to DISK
# save_folder: ./{run_name}/checkpoints
# save_folder: s3://my-bucket/my-folder/{run_name}/checkpoints

# Load from local filesystem or remote object store
# load_path: ./gpt-125m/checkpoints/latest-rank{rank}.pt
# load_path: s3://my-bucket/my-folder/gpt-125m/checkpoints/latest-rank{rank}.pt
